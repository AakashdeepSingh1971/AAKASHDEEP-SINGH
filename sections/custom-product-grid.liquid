{{ 'custom_grid.css' | asset_url | stylesheet_tag }}
<!-- Linking the custom CSS file for styling the product grid -->

<div class="section2">
  <h1 class="headingForGrid">Tisso vison in the wild</h1>
  <!-- Product grid displaying items from the selected collection -->
  <div class="productGrid">
    {% assign products = collections[section.settings.collection].products %}
    <!-- Loop through products in the selected collection, limited to 6 items -->
    {% for product in products limit: 6 %}
      <div
        class="productItem"
        onclick="fetchProduct({{ product.id }})"
        data-product-id="{{ product.id }}"
      >
        <!-- Display the product's featured image -->
        <!-- {{ product.featured_image | image_tag: crop: 'center', scale: 2 }} -->
        <img src="{{ product.featured_image | image_url }}" height="100%" width="100%">
      </div>
    {% endfor %}
  </div>

  <!-- Popup for displaying product details -->
  <div class="popup" id="product-popup">
    <div class="popup-content">
      <span class="close-popup" onclick="closePopup()">&#10005;</span>
      <div
        class="popupMainDiv"
        style="height: 93%; justify-content: space-between;"
      >
        <div class="popupMainDiv">
          <!-- Product image, title, price, and description -->
          <div class="firstDiv">
            <img id="popupImg" src="" alt="Product Image" class="productImage" height="140" width="120">
            <div class="popupTextDiv">
              <p id="popup-title"></p>
              <p id="popup-price"></p>
              <p id="popup-description"></p>
            </div>
          </div>

          <!-- Section for selecting color and size -->
          <div class="secondDiv">
            <div class="color-selector">
              <p class="colorHeader">Color</p>
              <div class="color-button-group" id="color-button-group"></div>
              <div class="size-selector">
                <label>Size</label>
                <div id="size"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Add to Cart button -->
        <div class="CartButtonDiv" id="CartButtonDiv">
          <a id="add-to-cart" class="add-to-cart-button">ADD TO CART</a>
          <span class="">&#8594;</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Stores the current selected product data
  var currentProduct = null;

  // Array to store product data from the collection
  const productData = [
    {% for product in products %}{
      'id': "{{ product.id }}",
      'title': "{{ product.title }}",
      'price': "{{ product.price }}",
      'description': "{{ product.description }}",
      'image': "{{ product.featured_image | img_url: '300x300' }}",
      'variants': [
        {% for variant in product.variants %}
          {
            'id': "{{ variant.id }}",
            'option1': "{{ variant.option1 }}", // Size
            'option2': "{{ variant.option2 }}", // Color
            'price': "{{ variant.price }}"
          }
          {% if forloop.last == false %},{% endif %}
        {% endfor %}
      ]
    }
    {% if forloop.last == false %},{% endif %}
    {% endfor %}
  ];

  console.log(productData);

  const popup = document.getElementById("product-popup");

  // Function to close the product popup
  function closePopup() {
    popup.style.display = "none";
  }

  // Function to fetch and display the selected product's details
  function fetchProduct(productId) {
    const id = productId.toString();
    const product = productData.find(item => item.id === id);
    currentProduct = product;

    if (product) {
      document.getElementById('popupImg').src = product.image;
      document.getElementById('popup-title').textContent = product.title;
      document.getElementById('popup-price').textContent = product.price + "â‚¬" || '';
      document.getElementById('popup-description').innerHTML = product.description || '';

      // Display color and size options
      const colorOptions = document.getElementById('color-button-group');
      const sizeOptions = document.getElementById('size');
      colorOptions.innerHTML = '';
      sizeOptions.innerHTML = '';

      let colors = new Set();
      let sizes = new Set();

      product.variants.forEach(variant => {
        if (variant.option2) colors.add(variant.option2); // Collect unique colors
        if (variant.option1) sizes.add(variant.option1); // Collect unique sizes
      });

      // Create and display color buttons
      colors.forEach(color => {
        const colorDiv = document.createElement('div');
        colorDiv.classList.add('color-option');
        colorDiv.setAttribute('data-color', color);

        const colorCircle = document.createElement('span');
        colorCircle.classList.add('colorDiv');
        colorCircle.style.backgroundColor = color;

        const colorName = document.createElement('span');
        colorName.classList.add('colorType');
        colorName.textContent = color;

        colorDiv.appendChild(colorCircle);
        colorDiv.appendChild(colorName);

        colorDiv.onclick = function() {
          document.querySelectorAll('.color-option').forEach(btn => btn.classList.remove('selected'));
          colorDiv.classList.add('selected');
        };

        colorOptions.appendChild(colorDiv);
        colorOptions.appendChild(document.createElement('div')).classList.add('divider');
      });

      // Create and display size dropdown
      const sizeDropdown = createSizeDropdown(Array.from(sizes));
      sizeOptions.appendChild(sizeDropdown);

      // Show the product popup
      document.getElementById('product-popup').style.display = 'flex';
    } else {
      console.error('Product not found!');
    }
  }

  // Function to handle size dropdown creation
  function createSizeDropdown(sizes) {
    const selectDiv = document.createElement('div');
    selectDiv.className = 'select';
    selectDiv.tabIndex = 1;

    const defaultOption = document.createElement('div');
    defaultOption.className = 'default-option';
    defaultOption.textContent = 'Choose your size';

    const arrowDiv = document.createElement('span');
    arrowDiv.className = 'arrowDiv';

    const arrow = document.createElement('span');
    arrow.className = 'arrow';
    arrowDiv.appendChild(arrow);
    defaultOption.appendChild(arrowDiv);
    selectDiv.appendChild(defaultOption);

    const dropdown = document.createElement('div');
    dropdown.className = 'dropdown-options';
    dropdown.style.display = 'none';

    sizes.forEach(size => {
      const optionDiv = document.createElement('div');
      optionDiv.className = 'dropdown-option';
      optionDiv.textContent = size;
      optionDiv.onclick = () => {
        defaultOption.textContent = size;
        dropdown.style.display = 'none';
        arrow.classList.remove('open');
      };
      dropdown.appendChild(optionDiv);
    });

    defaultOption.onclick = () => {
      const isVisible = dropdown.style.display === 'block';
      dropdown.style.display = isVisible ? 'none' : 'block';
      arrow.classList.toggle('open');
    };

    selectDiv.appendChild(dropdown);
    return selectDiv;
  }

  // Function to add a product to the cart
  function addToCart() {
    const addToCartButton = document.getElementById("CartButtonDiv");

    addToCartButton.addEventListener('click', async function() {
      const selectedColor = document.querySelector('.color-option.selected');
      const selectedSize = document.querySelector('.default-option');

      // Validate if both color and size are selected
      if (!selectedColor || selectedSize.textContent === "Choose your size") {
        alert('Please select both color and size');
        return;
      }

      const color = selectedColor.getAttribute('data-color');
      const size = selectedSize.textContent;
      const title = currentProduct.title;

      // Find the selected variant based on size and color
      const selectedVariant = currentProduct.variants.find(variant => variant.option1 === size && variant.option2 === color);
      selectedVariant["title"] = title;
      console.log(selectedVariant);

      // Simulate the add-to-cart process
      addToCartButton.textContent = "Adding...";
      addToCartButton.disabled = true;

      setTimeout(() => {
        addToCartButton.textContent = "Added to cart";
        setTimeout(() => {
          closePopup();
          addToCartButton.textContent = "ADD TO CART";
          addToCartButton.disabled = false;
        }, 1000);
      }, 2000);
    });
  }

  document.addEventListener('DOMContentLoaded', addToCart);
</script>

{% schema %}
{
  "name": "Product Grid Section",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Choose a Collection"
    }
  ]
}
{% endschema %}
